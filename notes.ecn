details
  - env.sh sets up the environment for working on all parts
    - RISCV env var points to riscv-tools directory

  software
    - source code of toolchain in riscv-tools-src
    - binaries in riscv-tools
      - bin subdirectory belongs into PATH

generating the environment
  - set up the shell environment by sourcing env.sh

  riscv tools
    - documentation is included in the git repository as markdown files
    # git clone https://github.com/riscv/riscv-tools.git riscv-tools-src
    # cd riscv-tools-src
    # git submodule update --init --recursive
      this may take some time as several submodules will be downloaded.
    - total disk usage after this operation: 633 MiB
    # bash build.sh
      this build fesvr, isa-sim, gnu toolchain, riscv-pk and riscv-tests.
      LLVM is compiled later
    # cd riscv-llvm
    # git branch RISCV
    # cd riscv-clang
    # git branch RISCV
    # cd ..
    # mkdir build
    # cd build
    # ../configure --prefix=$RISCV --enable-targets=riscv
    # make
      - this takes a very long time (90 minutes), so it's best to run it in
        screen / tmux and set up mail notification.
    # make install
    - total disk usage after this operation: 7.7 GiB

  
  rocket SoC with FPU
    # git clone https://github.com/sergeykhbr/riscv_vhdl.git rocket-soc
    - replace the rocket_soc/rocketlib/Top.GnssConfigNoFPU.v with the one
      generated by the rocket tile generator (later)
    - adjust ROM images in rocket_soc/work/config_common.vhd to relative paths

  
  rocket tile generator
    - this pretty much follows the README.md in the git repository.
    - contains a lot of scala/chisel code 
      ! todo: figure out directory structure
    - compiles to four targets
      - C simulator (/emulator, make)
      - C simulator with VCD waveform support (/emulator, make debug)
      - VCS simulator (/vsim, make)
      - FPGA (/fsim, make verilog)
      - ASIC (/vsim, make verilog)
    
    - note that the tile generator does not work out of the box, patches were
      applied to fix it.
    
    # git clone https://github.com/ucb-bar/rocket-chip.git
    # cd rocket-chip
    # git submodule update --init
    # cd riscv-tools
    # git submodule update --init --recursive riscv-tests

    simulators
      - making the simulators takes some time as it requires a lot of downloads
      # cd emulator
        - C-based simulator
      # make
        - can also be done with `make debug` to output VCD waveforms
      # make -j2 run-asm-tests
      # make -j2 run-bmark-tests
      # cd ../vsim
        - VCS-based simulator
      # make
      # make -j2 run-asm-tests
      # make -j2 run-bmark-tests
    
    FPGA target
      # cd fsim
      # make verilog


using the environment
  
  compiling binaries
    - binaries are compiled to targeted assembly with clang and assembled with
      binutils (gcc)
    # clang -target riscv -mriscv=RV64IAMFD -S <file>.c <file>.S
    # riscv-64-unknown-elf-gcc -o <file> <file>.S


  ! todo: figure out how to modify the core
  ! todo: figure out how to modify LLVM/CLANG
  ! todo: figure out how to download and execute binares


